<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/task
    http://www.springframework.org/schema/task/spring-task-3.1.xsd "

       default-autowire="byName" default-lazy-init="false">

    <!-- 定义受环境影响易变的变量 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <!-- 标准配置 -->
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
    <context:component-scan base-package="com.u8.server"/>
    <context:annotation-config/>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- Connection Info -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name = "maxActive" value = "${druid.maxActive}" />
        <property name = "filters" value = "${druid.filters}" />
        <!-- 初始化连接数量 -->
        <property name = "initialSize" value = "${druid.initialSize}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name = "maxWait" value = "${druid.maxWait}" />
        <!-- 最小空闲连接数 -->
        <property name = "minIdle" value = "${druid.minIdle}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name = "timeBetweenEvictionRunsMillis" value ="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name = "minEvictableIdleTimeMillis" value ="${druid.minEvictableIdleTimeMillis}" />
        <property name = "validationQuery" value = "${druid.validationQuery}" />
        <property name = "testWhileIdle" value = "${druid.testWhileIdle}" />
        <property name = "testOnBorrow" value = "${druid.testOnBorrow}" />
        <property name = "testOnReturn" value = "${druid.testOnReturn}" />
        <property name = "maxOpenPreparedStatements" value ="${druid.maxOpenPreparedStatements}" />
        <!-- 打开 removeAbandoned 功能 -->
        <property name = "removeAbandoned" value = "${druid.removeAbandoned}" />
        <!-- 1800 秒，也就是 30 分钟 -->
        <property name = "removeAbandonedTimeout" value ="${druid.removeAbandonedTimeout}" />
        <!-- 关闭 abanded 连接时输出错误日志 -->
        <property name = "logAbandoned" value = "${druid.logAbandoned}" />

    </bean>

    <bean id="uEntityInterceptor" class="com.u8.server.common.LogInterceptor"></bean>

    <!-- Hibernate配置 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="entityInterceptor" ref="uEntityInterceptor"></property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.connection.release_mode">auto</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <!--<prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop>-->
            </props>
        </property>
        <property name="packagesToScan" value="com.u8.server.data"/>
    </bean>

    <!-- 事务管理器配置,单数据源事务 -->
   <bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

  <!--  <tx:annotation-driven transaction-manager="txManager"/>-->

    <!--这种配置事务方式结合OpenSessionInViewFilter会导致数据库死锁-->
   <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="is*" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>


    <!-- 使用annotation定义事务 -->
   <tx:annotation-driven transaction-manager="txManager" proxy-target-class="true"/>

   <aop:config proxy-target-class="true">
        <aop:advisor pointcut="execution(* com.u8.server.service..*Manager.*(..))" advice-ref="txAdvice"/>
        <aop:advisor pointcut="execution(* com.u8.server.dao..*Dao.*(..))" advice-ref="txAdvice"/>
    </aop:config>
    <task:annotation-driven/>

    <context:annotation-config/>
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
    <context:component-scan base-package="com.u8.server.task.collect"/>

</beans>